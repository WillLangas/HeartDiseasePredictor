{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "healthy-tattoo",
   "metadata": {},
   "source": [
    "# Predicting Heart Disease\n",
    "\n",
    "### By Will Langas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "destroyed-interstate",
   "metadata": {},
   "source": [
    "## Data Source:\n",
    "https://archive.ics.uci.edu/ml/datasets/Heart+Disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "typical-emergency",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import cross_val_score, permutation_test_score\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "hundred-assistant",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['font.size'] = '12'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "inner-journey",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Datapoints:  296\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>63.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>1.0.1</th>\n",
       "      <th>145.0</th>\n",
       "      <th>233.0</th>\n",
       "      <th>1.0.2</th>\n",
       "      <th>2.0</th>\n",
       "      <th>150.0</th>\n",
       "      <th>0.0</th>\n",
       "      <th>2.3</th>\n",
       "      <th>3.0</th>\n",
       "      <th>0.0.1</th>\n",
       "      <th>6.0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   63.0  1.0  1.0.1  145.0  233.0  1.0.2  2.0  150.0  0.0  2.3  3.0  0.0.1  \\\n",
       "0  67.0  1.0    4.0  160.0  286.0    0.0  2.0  108.0  1.0  1.5  2.0    3.0   \n",
       "1  67.0  1.0    4.0  120.0  229.0    0.0  2.0  129.0  1.0  2.6  2.0    2.0   \n",
       "2  37.0  1.0    3.0  130.0  250.0    0.0  0.0  187.0  0.0  3.5  3.0    0.0   \n",
       "3  41.0  0.0    2.0  130.0  204.0    0.0  2.0  172.0  0.0  1.4  1.0    0.0   \n",
       "4  56.0  1.0    2.0  120.0  236.0    0.0  0.0  178.0  0.0  0.8  1.0    0.0   \n",
       "\n",
       "   6.0  0  \n",
       "0  3.0  2  \n",
       "1  7.0  1  \n",
       "2  3.0  0  \n",
       "3  3.0  0  \n",
       "4  3.0  0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# https://stackoverflow.com/questions/51752298/seeking-a-faster-way-to-drop-all-placeholders-from-pandas-dataframe\n",
    "# https://towardsdatascience.com/how-to-use-data-files-from-uci-68b740b4719d\n",
    "\n",
    "df =  pd.read_csv('processed.cleveland.data', sep=\",\", na_values=[\"?\"]) # NaN values are represented as ? in the dataset\n",
    "orig_cols = df.columns\n",
    "df = df.dropna()\n",
    "\n",
    "print(\"Number of Datapoints: \", len(df))\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "settled-corps",
   "metadata": {},
   "source": [
    "## Data Cleaning\n",
    "\n",
    "As seen above, the data is currently in a very confusing format, since the column names are represented as values instead of their actual meaning, thus, we will rename the columns in the following cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "crucial-colombia",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Chest Pain</th>\n",
       "      <th>Rest BP</th>\n",
       "      <th>Chol</th>\n",
       "      <th>Blood Sugar</th>\n",
       "      <th>Rest ECG</th>\n",
       "      <th>Max HR</th>\n",
       "      <th>Exercise</th>\n",
       "      <th>Peak</th>\n",
       "      <th>Slope</th>\n",
       "      <th>Vessels</th>\n",
       "      <th>Thal</th>\n",
       "      <th>Output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age  Sex  Chest Pain  Rest BP   Chol  Blood Sugar  Rest ECG  Max HR  \\\n",
       "0  67.0  1.0         4.0    160.0  286.0          0.0       2.0   108.0   \n",
       "1  67.0  1.0         4.0    120.0  229.0          0.0       2.0   129.0   \n",
       "2  37.0  1.0         3.0    130.0  250.0          0.0       0.0   187.0   \n",
       "3  41.0  0.0         2.0    130.0  204.0          0.0       2.0   172.0   \n",
       "4  56.0  1.0         2.0    120.0  236.0          0.0       0.0   178.0   \n",
       "\n",
       "   Exercise  Peak  Slope  Vessels  Thal  Output  \n",
       "0       1.0   1.5    2.0      3.0   3.0       2  \n",
       "1       1.0   2.6    2.0      2.0   7.0       1  \n",
       "2       0.0   3.5    3.0      0.0   3.0       0  \n",
       "3       0.0   1.4    1.0      0.0   3.0       0  \n",
       "4       0.0   0.8    1.0      0.0   3.0       0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Age\"] = df[\"63.0\"]\n",
    "df[\"Sex\"] = df[\"1.0\"]\n",
    "df[\"Chest Pain\"] = df[\"1.0.1\"]\n",
    "df[\"Rest BP\"] = df[\"145.0\"]\n",
    "df[\"Chol\"] = df[\"233.0\"]\n",
    "df[\"Blood Sugar\"] = df[\"1.0.2\"]\n",
    "df[\"Rest ECG\"] = df[\"2.0\"]\n",
    "df[\"Max HR\"] = df[\"150.0\"]\n",
    "df[\"Exercise\"] = df[\"0.0\"]\n",
    "df[\"Peak\"] = df[\"2.3\"]\n",
    "df[\"Slope\"] = df[\"3.0\"]\n",
    "df[\"Vessels\"] = df[\"0.0.1\"]\n",
    "df[\"Thal\"] = df[\"6.0\"]\n",
    "df[\"Output\"] = df[\"0\"]\n",
    "\n",
    "df = df.drop(columns = orig_cols)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "precious-tablet",
   "metadata": {},
   "source": [
    "Our analysis is simply looking for the presence of heart disease, not the types of heart disease, therefore we will alter the data so the any value 0-4 is either a 0 or 1. As according to the critiria stated in the original dataset:\n",
    "\n",
    "\"58 num: diagnosis of heart disease (angiographic disease status)\n",
    "-- Value 0: < 50% diameter narrowing\n",
    "-- Value 1: > 50% diameter narrowing\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cross-africa",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Output'] > 0, 'Output'] = 1 \n",
    "df.loc[df['Output'] == 0, 'Output'] = 0 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "harmful-leadership",
   "metadata": {},
   "source": [
    "## Outlier Testing and Filtering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "incomplete-bacon",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Chest Pain</th>\n",
       "      <th>Rest BP</th>\n",
       "      <th>Chol</th>\n",
       "      <th>Blood Sugar</th>\n",
       "      <th>Rest ECG</th>\n",
       "      <th>Max HR</th>\n",
       "      <th>Exercise</th>\n",
       "      <th>Peak</th>\n",
       "      <th>Slope</th>\n",
       "      <th>Vessels</th>\n",
       "      <th>Thal</th>\n",
       "      <th>Output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>296.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.513514</td>\n",
       "      <td>0.675676</td>\n",
       "      <td>3.165541</td>\n",
       "      <td>131.648649</td>\n",
       "      <td>247.398649</td>\n",
       "      <td>0.141892</td>\n",
       "      <td>0.993243</td>\n",
       "      <td>149.597973</td>\n",
       "      <td>0.327703</td>\n",
       "      <td>1.051351</td>\n",
       "      <td>1.597973</td>\n",
       "      <td>0.679054</td>\n",
       "      <td>4.726351</td>\n",
       "      <td>0.462838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.051631</td>\n",
       "      <td>0.468915</td>\n",
       "      <td>0.958262</td>\n",
       "      <td>17.775956</td>\n",
       "      <td>52.078915</td>\n",
       "      <td>0.349530</td>\n",
       "      <td>0.994879</td>\n",
       "      <td>22.980401</td>\n",
       "      <td>0.470171</td>\n",
       "      <td>1.165841</td>\n",
       "      <td>0.613848</td>\n",
       "      <td>0.939726</td>\n",
       "      <td>1.940500</td>\n",
       "      <td>0.499461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>211.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>56.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>243.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>276.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age         Sex  Chest Pain     Rest BP        Chol  \\\n",
       "count  296.000000  296.000000  296.000000  296.000000  296.000000   \n",
       "mean    54.513514    0.675676    3.165541  131.648649  247.398649   \n",
       "std      9.051631    0.468915    0.958262   17.775956   52.078915   \n",
       "min     29.000000    0.000000    1.000000   94.000000  126.000000   \n",
       "25%     48.000000    0.000000    3.000000  120.000000  211.000000   \n",
       "50%     56.000000    1.000000    3.000000  130.000000  243.000000   \n",
       "75%     61.000000    1.000000    4.000000  140.000000  276.250000   \n",
       "max     77.000000    1.000000    4.000000  200.000000  564.000000   \n",
       "\n",
       "       Blood Sugar    Rest ECG      Max HR    Exercise        Peak  \\\n",
       "count   296.000000  296.000000  296.000000  296.000000  296.000000   \n",
       "mean      0.141892    0.993243  149.597973    0.327703    1.051351   \n",
       "std       0.349530    0.994879   22.980401    0.470171    1.165841   \n",
       "min       0.000000    0.000000   71.000000    0.000000    0.000000   \n",
       "25%       0.000000    0.000000  133.000000    0.000000    0.000000   \n",
       "50%       0.000000    1.000000  153.000000    0.000000    0.800000   \n",
       "75%       0.000000    2.000000  166.000000    1.000000    1.600000   \n",
       "max       1.000000    2.000000  202.000000    1.000000    6.200000   \n",
       "\n",
       "            Slope     Vessels        Thal      Output  \n",
       "count  296.000000  296.000000  296.000000  296.000000  \n",
       "mean     1.597973    0.679054    4.726351    0.462838  \n",
       "std      0.613848    0.939726    1.940500    0.499461  \n",
       "min      1.000000    0.000000    3.000000    0.000000  \n",
       "25%      1.000000    0.000000    3.000000    0.000000  \n",
       "50%      2.000000    0.000000    3.000000    0.000000  \n",
       "75%      2.000000    1.000000    7.000000    1.000000  \n",
       "max      3.000000    3.000000    7.000000    1.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info = df.describe()\n",
    "info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lasting-integrity",
   "metadata": {},
   "source": [
    "- In the Cholesterol column, we see that the maximum value is 564, versus an average of ~250. In the following section we will perform analysis to determine if there are outliers, and filter accordingly in the Cholesterol column\n",
    "- We will only do this in Cholesterol column, since 564 is more than two times what is considered \"High\" cholesterol, and there are most likely other factors like underlying conditions at play here that could skew analysis\n",
    "https://www.cnn.com/2009/HEALTH/11/24/moh.healthmag.cholesterol.surprises/index.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fundamental-genome",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Datapoints:  291\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Chest Pain</th>\n",
       "      <th>Rest BP</th>\n",
       "      <th>Chol</th>\n",
       "      <th>Blood Sugar</th>\n",
       "      <th>Rest ECG</th>\n",
       "      <th>Max HR</th>\n",
       "      <th>Exercise</th>\n",
       "      <th>Peak</th>\n",
       "      <th>Slope</th>\n",
       "      <th>Vessels</th>\n",
       "      <th>Thal</th>\n",
       "      <th>Output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age  Sex  Chest Pain  Rest BP   Chol  Blood Sugar  Rest ECG  Max HR  \\\n",
       "0  67.0  1.0         4.0    160.0  286.0          0.0       2.0   108.0   \n",
       "1  67.0  1.0         4.0    120.0  229.0          0.0       2.0   129.0   \n",
       "2  37.0  1.0         3.0    130.0  250.0          0.0       0.0   187.0   \n",
       "3  41.0  0.0         2.0    130.0  204.0          0.0       2.0   172.0   \n",
       "4  56.0  1.0         2.0    120.0  236.0          0.0       0.0   178.0   \n",
       "\n",
       "   Exercise  Peak  Slope  Vessels  Thal  Output  \n",
       "0       1.0   1.5    2.0      3.0   3.0       1  \n",
       "1       1.0   2.6    2.0      2.0   7.0       1  \n",
       "2       0.0   3.5    3.0      0.0   3.0       0  \n",
       "3       0.0   1.4    1.0      0.0   3.0       0  \n",
       "4       0.0   0.8    1.0      0.0   3.0       0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# https://www.thoughtco.com/what-is-the-interquartile-range-rule-3126244\n",
    "\n",
    "IQR = df[\"Chol\"].quantile(0.75) - df[\"Chol\"].quantile(0.25)\n",
    "\n",
    "max_chol = (1.5 * IQR) + df[\"Chol\"].quantile(0.75)\n",
    "min_chol = df[\"Chol\"].quantile(0.25) - (1.5 * IQR) \n",
    "\n",
    "df = df[df[\"Chol\"] <= max_chol]\n",
    "df = df[df[\"Chol\"] >= min_chol]\n",
    "\n",
    "print(\"Number of Datapoints: \", len(df))\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "olympic-surge",
   "metadata": {},
   "source": [
    "## Dataset Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "stock-beginning",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "disease = df[df[\"Output\"] == 1]\n",
    "no_disease = df[df[\"Output\"] == 0]\n",
    "\n",
    "labels = ['Disease', 'No Disease']\n",
    "men_vals = [len(disease[disease[\"Sex\"] == 1]), len(no_disease[no_disease[\"Sex\"] == 1])]\n",
    "women_vals = [len(disease[disease[\"Sex\"] == 0]), len(no_disease[no_disease[\"Sex\"] == 0])]\n",
    "\n",
    "x = np.arange(len(labels))\n",
    "width = 0.35  \n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6, 4))\n",
    "rects1 = ax.bar(x - width/2, men_vals, width, label='Men', color=\"deepskyblue\")\n",
    "rects2 = ax.bar(x + width/2, women_vals, width, label='Women', color=\"lightpink\")\n",
    "\n",
    "ax.set_ylabel('Count', fontsize = 18)\n",
    "ax.set_title('Distribution by Disease and Gender', fontsize = 18, weight=\"heavy\")\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(labels, fontsize = 18)\n",
    "ax.legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "first-purchase",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men with disease:  38.49\n",
      "Men without disease:  30.24\n",
      "\n",
      "Women with disease:  7.9\n",
      "Women without disease:  23.37\n"
     ]
    }
   ],
   "source": [
    "print(\"Men with disease: \", (round((len(disease[disease[\"Sex\"] == 1]) / len(df)) * 100, 2)))\n",
    "print(\"Men without disease: \", (round((len(no_disease[no_disease[\"Sex\"] == 1]) / len(df)) * 100, 2)))\n",
    "print()\n",
    "print(\"Women with disease: \", (round((len(disease[disease[\"Sex\"] == 0]) / len(df)) * 100, 2)))\n",
    "print(\"Women without disease: \", (round((len(no_disease[no_disease[\"Sex\"] == 0]) / len(df)) * 100, 2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "periodic-dylan",
   "metadata": {},
   "source": [
    "## Preparation for Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "opposed-chicago",
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test = train_test_split(df) # 75% for training, 25% for testing as per default values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "announced-alias",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_columns = [\"Age\", \"Sex\", \"Chest Pain\", \"Rest BP\", \"Chol\", \n",
    "                \"Blood Sugar\", \"Rest ECG\", \"Max HR\", \"Exercise\", \n",
    "                \"Peak\", \"Slope\", \"Vessels\", \"Thal\"]\n",
    "\n",
    "y = \"Output\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "favorite-quebec",
   "metadata": {},
   "source": [
    "# Figure 1\n",
    "\n",
    "## Resting Blood Pressure vs. Cholesterol By Heart Disease\n",
    "\n",
    "- Typically in America, people's minds go to factors such as cholesterol or blood pressure as the most major causes of heart disease\n",
    "- If this were true, in the graph below, we would see more heart disease markers around the upper right quadrant of the figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "progressive-antigua",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chol with Heart Disease:  249.54074074074074\n",
      "Chol without Heart Disease:  239.42948717948718\n",
      "\n",
      "BP with Heart Disease:  134.52592592592592\n",
      "BP without Heart Disease:  129.02564102564102\n"
     ]
    }
   ],
   "source": [
    "disease = df[df[\"Output\"] == 1]\n",
    "no_disease = df[df[\"Output\"] == 0]\n",
    "\n",
    "\n",
    "print(\"Chol with Heart Disease: \", disease[\"Chol\"].mean())\n",
    "print(\"Chol without Heart Disease: \", no_disease[\"Chol\"].mean())\n",
    "print()\n",
    "print(\"BP with Heart Disease: \", disease[\"Rest BP\"].mean())\n",
    "print(\"BP without Heart Disease: \", no_disease[\"Rest BP\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "entertaining-thought",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "disease = df[df[\"Output\"] == 1]\n",
    "no_disease = df[df[\"Output\"] == 0]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,5))\n",
    "\n",
    "ax.set_ylabel(\"Cholesterol\", fontsize=16,)\n",
    "ax.set_xlabel(\"Resting Blood Pressure\", fontsize=16,)\n",
    "ax.set_title(\"Figure 1: Blood Pressure vs. Cholesterol By Heart Disease\", fontsize=16, weight=\"heavy\", pad=10)\n",
    "\n",
    "ax.scatter(x=disease[\"Rest BP\"], y=disease[\"Chol\"], marker=\"x\", label=\"Heart Disease\", color=\"indianred\", linewidths=2.5)\n",
    "ax.scatter(x=no_disease[\"Rest BP\"], y=no_disease[\"Chol\"],  marker=\".\", label=\"No Disease\", color=\"grey\", linewidths=2.5)\n",
    "\n",
    "ax.legend()\n",
    "\n",
    "fig.savefig('figure_1.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "persistent-village",
   "metadata": {},
   "source": [
    "- Notice that although there are a decent amount of individuals with heart disease in the upper right quadrant, we see a somewhat even scattering of individuals with and without heart disease throughout the plot\n",
    "- This suggests that these two factors alone are not enough for predicting heart disease\n",
    "    - Proving this, a simple Logistic Regression model that just takes these into account has limited accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "sensitive-magnet",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.79"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe = Pipeline([\n",
    "    (\"scale\", StandardScaler()),\n",
    "    (\"lr\", LogisticRegression())\n",
    "])\n",
    "\n",
    "pipe.fit(train[[\"Chol\", \"Rest BP\"]], train[\"Output\"])\n",
    "(pipe.score(test[[\"Chol\", \"Rest BP\"]], test[\"Output\"]) * 100).round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "neural-inspiration",
   "metadata": {},
   "source": [
    "# Figure 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "numeric-florist",
   "metadata": {},
   "source": [
    "## PCA\n",
    "\n",
    "- Here we will perform a Principal Component Analysis (PCA) to determine whether or not all features should be included in the Logistic Regression\n",
    "\n",
    "https://towardsdatascience.com/pca-using-python-scikit-learn-e653f8989e60"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "searching-request",
   "metadata": {},
   "source": [
    "### With Standard Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "apparent-school",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.23801269911370157,\n",
       " 0.3575725075824593,\n",
       " 0.4524198788290328,\n",
       " 0.5388622828850992,\n",
       " 0.6162826957685816,\n",
       " 0.685833833835825,\n",
       " 0.7516131128769792,\n",
       " 0.8099953474913897,\n",
       " 0.8625967807739165,\n",
       " 0.9055901019509367,\n",
       " 0.9408218712288462,\n",
       " 0.9724216237849319,\n",
       " 0.9999999999999999]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "explained_variances_with_scale = []\n",
    "components = []\n",
    "\n",
    "pca_df = df.copy()\n",
    "x = pca_df.loc[:, data_columns].values\n",
    "\n",
    "    # Separating out the target\n",
    "out = pca_df.loc[:,[\"Output\"]].values\n",
    "\n",
    "    # Standardizing the features\n",
    "x = StandardScaler().fit_transform(x)\n",
    "\n",
    "for idx in range(1, 14):\n",
    "    \n",
    "    pca = PCA(n_components=idx)\n",
    "    principalComponents = pca.fit_transform(x)\n",
    "    principalDf = pd.DataFrame(data = principalComponents) # might need cols\n",
    "    \n",
    "    finalDf = principalDf\n",
    "\n",
    "    finalDf[\"Output\"] = pca_df[\"Output\"]\n",
    "    finalDf = finalDf.dropna()\n",
    "    explained_variances_with_scale.append(sum(pca.explained_variance_ratio_))\n",
    "    components.append(pca.explained_variance_ratio_)\n",
    "\n",
    "explained_variances_with_scale    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "yellow-bloom",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([0.2380127]),\n",
       " array([0.2380127 , 0.11955981]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 ]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223, 0.05260143]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223, 0.05260143, 0.04299332]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223, 0.05260143, 0.04299332,\n",
       "        0.03523177]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223, 0.05260143, 0.04299332,\n",
       "        0.03523177, 0.03159975]),\n",
       " array([0.2380127 , 0.11955981, 0.09484737, 0.0864424 , 0.07742041,\n",
       "        0.06955114, 0.06577928, 0.05838223, 0.05260143, 0.04299332,\n",
       "        0.03523177, 0.03159975, 0.02757838])]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "components"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "creative-engine",
   "metadata": {},
   "source": [
    "### Without Standard Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "numerical-procedure",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.6882805972713609,\n",
       " 0.8732332605521269,\n",
       " 0.9777668904996575,\n",
       " 0.9973821271576342,\n",
       " 0.9986004733268408,\n",
       " 0.9989994501053668,\n",
       " 0.9993091138882374,\n",
       " 0.9995710193484422,\n",
       " 0.999784554221304,\n",
       " 0.9998567991300068,\n",
       " 0.9999133991604918,\n",
       " 0.999962876032609,\n",
       " 1.0000000000000002]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "explained_variances_no_scale = []\n",
    "\n",
    "pca_df_2 = df.copy()\n",
    "x = pca_df.loc[:, data_columns].values\n",
    "\n",
    "# Separating out the target\n",
    "out = pca_df.loc[:,[\"Output\"]].values\n",
    "\n",
    "for idx in range(1, 14):\n",
    "    \n",
    "    pca = PCA(n_components=idx)\n",
    "    principalComponents = pca.fit_transform(x)\n",
    "    principalDf = pd.DataFrame(data = principalComponents) # might need cols\n",
    "    \n",
    "    finalDf = principalDf\n",
    "    \n",
    "    finalDf[\"Output\"] = pca_df[\"Output\"]\n",
    "    finalDf = finalDf.dropna()\n",
    "    explained_variances_no_scale.append(sum(pca.explained_variance_ratio_))\n",
    "    \n",
    "explained_variances_no_scale"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wrapped-photographer",
   "metadata": {},
   "source": [
    "## Plotting Explained Variance by Components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "close-guess",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8, 5))\n",
    "\n",
    "with_scale = pd.Series(explained_variances_with_scale, index=range(1,14))\n",
    "no_scale = pd.Series(explained_variances_no_scale, index=range(1,14))\n",
    "\n",
    "ax.set_ylabel(\"Explained Variance\", fontsize=16,)\n",
    "ax.set_xlabel(\"Number of Components Included\", fontsize=16,)\n",
    "ax.set_title(\"Figure 2: Number of Components vs. Explained Variance\", fontsize=16, weight=\"heavy\", pad=10)\n",
    "\n",
    "ax.set_xticks(range(1,14))\n",
    "\n",
    "ax.plot(with_scale, color=\"indianred\", linewidth=3, label=\"With Scaling\")\n",
    "ax.plot(no_scale, color=\"gray\", linewidth=3, label=\"No Scaling\")\n",
    "\n",
    "ax.legend()\n",
    "\n",
    "fig.savefig('figure_2.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "brown-tower",
   "metadata": {},
   "source": [
    "- When using standard scaling, we see that using all 13 features is both needed and justified in order to effectively predict heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "meaning-frontier",
   "metadata": {},
   "source": [
    "# Figure 3: Logistic Regression\n",
    "- Using a sklearn pipeline, we are able to produce a solid score taking all 13 factors into account"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "charming-croatia",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "84.93"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = train.copy()\n",
    "test = test.copy()\n",
    "\n",
    "pipe = Pipeline([\n",
    "    (\"scaler\", StandardScaler()),\n",
    "    (\"lr\", LogisticRegression(solver = 'lbfgs'))\n",
    "])\n",
    "\n",
    "pipe.fit(train[data_columns], train[y])\n",
    "(pipe.score(test[data_columns], test[y]) * 100).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "blocked-quick",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "83.88888888888889"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(pipe, test[data_columns], test[y], cv=8).mean() * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "measured-matthew",
   "metadata": {},
   "outputs": [],
   "source": [
    "score, garbage_score, p = permutation_test_score(pipe, test[data_columns], test[y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "random-dialogue",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(garbage_score).hist(color=\"indianred\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "present-conference",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8380952380952381"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "moving-leeds",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.009900990099009901"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "grateful-third",
   "metadata": {},
   "source": [
    "Taken from the documentation for permutation_test_score:\n",
    "\n",
    "\"A small p-value suggests that there is a real dependency between features and targets which has been used by the estimator to give good predictions.\"\n",
    "\n",
    "Thus, this test suggests that there is indeed a relationship between the features of this data and its target variable, and our model accurately reflects such relationship"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "descending-shame",
   "metadata": {},
   "source": [
    "## Graphing Coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "executive-subject",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.025662953490424086,\n",
       " 0.524532933519156,\n",
       " 0.515127590180069,\n",
       " 0.2916302050131358,\n",
       " 0.38980529251689994,\n",
       " -0.09553678539882962,\n",
       " 0.17215362520336802,\n",
       " -0.5116549878453839,\n",
       " 0.3847099000380757,\n",
       " 0.47996473555894653,\n",
       " 0.3633640821969442,\n",
       " 0.8198012432142059,\n",
       " 0.701815887492446]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coefs = list(pipe.named_steps['lr'].coef_[0])\n",
    "coefs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "sealed-waterproof",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://matplotlib.org/stable/gallery/lines_bars_and_markers/bar_label_demo.html#sphx-glr-gallery-lines-bars-and-markers-bar-label-demo-py\n",
    "# https://stackoverflow.com/questions/10998621/rotate-axis-text-in-python-matplotlib\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(14, 6))\n",
    "\n",
    "ax.axhline(0, color='k', linewidth=1)\n",
    "\n",
    "ax.set_ylabel(\"Coefficients\", fontsize=16)\n",
    "ax.set_xlabel(\"Feature\", fontsize=16)\n",
    "ax.set_title(\"Figure 3: Logistic Regression Coefficients by Feature\", fontsize=16, weight=\"heavy\", pad=10)\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "bars = ax.bar(data_columns, height=coefs, color=\"indianred\")\n",
    "\n",
    "for bar in bars:\n",
    "    height = bar.get_height().round(2)\n",
    "    label_x_pos = bar.get_x() + bar.get_width() / 2\n",
    "    if height > 0:\n",
    "        ax.text(label_x_pos, height, s=f'{height}', ha='center',\n",
    "        va='bottom', fontsize=10)\n",
    "    else:\n",
    "        ax.text(label_x_pos, height, s=f'{height}', ha='center',\n",
    "        va='top', fontsize=10)\n",
    "    \n",
    "fig.savefig('figure_3.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "charming-horizontal",
   "metadata": {},
   "source": [
    "- We see that factors such as age, one's resting blood pressure, and whether or not they are above a certain threshold for blood sugar have relatively little effect on predicting heart disease\n",
    "- However, we see that factors such as one's gender, the level of chest pain being experienced, the amount of blood vessels detected, and the presence of Thalassemia have a large effect on predicting heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "domestic-cargo",
   "metadata": {},
   "source": [
    "# Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "verbal-order",
   "metadata": {},
   "source": [
    "- In conclusion, we see that while society largely believes that factors such as cholesterol and blood pressure are main risk factors for heart failure, we see that there are a variety of characteristics at play\n",
    "- We also see that averaging near 85% accuracy, our model is somewhat effective in predicting heart disease\n",
    "    - Further improvements would include more data to train the model on, access to the other metrics contained originally by the dataset, and the use of more complex models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "settled-czech",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
